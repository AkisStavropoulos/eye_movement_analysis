function [trials,totaltrls] = AddLOGData_old(file)
% version of initial experiment
count = 0;
fid = fopen(file, 'r');
eof=0; newline = 'nothingnew'; count=0;
%% check if this data was generated by replaying the stimulus movie
% if strcmp(file(1:6),'replay'), replay_movie = true;
% else, replay_movie = false; end
%% check for fixed ground landmark
% while ~strcmp(newline(1:9),'Enable Li')
%     newline = fgetl(fid);
% end
% fixed_ground = logical(1 - str2double(newline(18))); % if limited lifetime is enabled (1), fixed_ground is 0
%% Get firefly ON duration
% while ~strcmp(newline(1:10),'Firefly ON')
%     newline = fgetl(fid);
% end
% if strcmp(newline(1:10),'Firefly ON')
%     firefly_ONduration = str2num(newline(end));
% end
%% Get JS coefficient, Vmax, Wmax
while ~strcmp(newline(1:9),'Joy Stick')
    newline = fgetl(fid);
end
while ~strcmp(newline(1:14),'Joy Stick Coef'); newline = fgetl(fid); end
if strcmp(newline(1:14),'Joy Stick Coef')
    js_coef = str2num(newline(25:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:17),'Joy Stick Max Vel')
    vmax = str2num(newline(32:end));
    newline = fgetl(fid);
end
if strcmp(newline(1:17),'Joy Stick Max Ang')
    wmax = str2num(newline(41:end));
    newline = fgetl(fid);
end

while newline ~= -1
    %% get ground plane density, firefly position, stimulus type
    while ~strcmp(newline(1:10),{'Trial Num#','Floor Dens','Firefly Po','Stim Type:'})
        newline = fgetl(fid);
        if newline == -1, break; end
    end
    if newline == -1, break; end
    count = count+1;
    if strcmp(newline(1:10),'Trial Num#')
        totaltrls = str2num(newline(12:end));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:10),'Floor Dens')
        trials(count).prs.floordensity = str2num(newline(27:34));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:10),'Firefly Po')
        indx_space = strfind(newline,' ');
        %         numspaces = length(indx_space);
        trials(count).prs.fireflyposx = -str2num(newline(indx_space(4):indx_space(5)));
        trials(count).prs.fireflyposy = -str2num(newline(indx_space(5):end));
        newline = fgetl(fid);
    end
    if strcmp(newline(1:10),'Stim Type:')
        trials(count).prs.stimtype = str2num(newline(12));
        newline = fgetl(fid);
    end
%     trials(count).prs.firefly_ONduration = firefly_ONduration;
    trials(count).prs.js_coef = js_coef;
    trials(count).prs.vmax = vmax;
    trials(count).prs.wmax = wmax;
    if newline == -1, break; end
    % initialise
    %     trials(count).logical.landmark_distance = false;
%     trials(count).logical.landmark_angle = false; % #$%^&&^&*^danger - change false to nan immediately (what if field missing from log file??)
%     trials(count).logical.landmark_fixedground = fixed_ground;
%     trials(count).prs.ptb_linear = 0;
%     trials(count).prs.ptb_angular = 0;
%     trials(count).prs.ptb_delay = 0;
%     trials(count).prs.intertrial_interval = nan;
%     trials(count).logical.firefly_fullON = nan;
%     trials(count).prs.stop_duration = nan;
%     trials(count).logical.replay = replay_movie;
    %% get landmark status, ptb velocities and ptb delay
%     newline = fgetl(fid);
%     if newline == -1, break; end
%     if strcmp(newline(1:9),'Enable Di')
%         trials(count).logical.landmark_distance = str2num(newline(26)); % 1=distance landmark was ON
%         newline = fgetl(fid);
%         trials(count).logical.landmark_angle = str2num(newline(25)); % 1=angular landmark was ON
%         newline = fgetl(fid);
%         trials(count).prs.ptb_linear = str2num(newline(35:end)); % amplitude of linear velocity ptb (cm/s)
%         newline = fgetl(fid);
%         trials(count).prs.ptb_angular = str2num(newline(37:end)); % amplitude of angular velocity ptb (deg/s)
%         newline = fgetl(fid);
%         trials(count).prs.ptb_delay = str2num(newline(31:end)); % time after trial onset at which to begin ptb
%         newline = fgetl(fid);
%     end
    %% get inter-trial interval and firefly status
%     if newline == -1, break; end
%     if strcmp(newline(1:10),'Firefly ON')
%         trials(count).prs.intertrial_interval = str2num(newline(27:end)); % time between end of this trial and beg of next trial (s)
%         newline = fgetl(fid);
%         trials(count).logical.firefly_fullON = str2num(newline(18)); % 1=firefly was ON throughout the trial
%         newline = fgetl(fid);
%     end    
    %% get stopping duration for reward
%     if newline == -1, break; end
%     if strcmp(newline(1:8),'Distance')
%         trials(count).prs.stop_duration = str2num(newline(34:end))/1000; % wait duration after stopping before monkey is given feedback (s)
%     end
end

